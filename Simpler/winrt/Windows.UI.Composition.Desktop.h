// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_Windows_UI_Composition_Desktop_H
#define WINRT_Windows_UI_Composition_Desktop_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.3.4.5"), "Mismatched C++/WinRT headers.");
#include "winrt/Windows.UI.Composition.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Composition.Desktop.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Windows_UI_Composition_Desktop_IDesktopWindowTarget<D>::IsTopmost() const
    {
        bool value;
        check_hresult(WINRT_IMPL_SHIM(Windows::UI::Composition::Desktop::IDesktopWindowTarget)->get_IsTopmost(&value));
        return value;
    }
    template <typename D>
    struct produce<D, Windows::UI::Composition::Desktop::IDesktopWindowTarget> : produce_base<D, Windows::UI::Composition::Desktop::IDesktopWindowTarget>
    {
        int32_t __stdcall get_IsTopmost(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsTopmost());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename U> struct bindable<Windows::UI::Composition::Desktop::DesktopWindowTarget, U>
    {
        static xaml_binding bind(Windows::UI::Composition::Desktop::DesktopWindowTarget const& object, hstring const& name)
        {
            if (name == L"IsTopmost") return
            {
                [object] { return object.IsTopmost(); }
            };
            if (name == L"Root") return
            {
                [object] { return object.Root(); },
                [object](auto&& value) { object.Root(value); }
            };
            if (name == L"Compositor") return
            {
                [object] { return object.Compositor(); }
            };
            if (name == L"Dispatcher") return
            {
                [object] { return object.Dispatcher(); }
            };
            if (name == L"Properties") return
            {
                [object] { return object.Properties(); }
            };
            if (name == L"Comment") return
            {
                [object] { return object.Comment(); },
                [object](auto&& value) { object.Comment(value); }
            };
            if (name == L"ImplicitAnimations") return
            {
                [object] { return object.ImplicitAnimations(); },
                [object](auto&& value) { object.ImplicitAnimations(value); }
            };
            if (name == L"DispatcherQueue") return
            {
                [object] { return object.DispatcherQueue(); }
            };
            return {};
        }
    };
}
namespace winrt::Windows::UI::Composition::Desktop
{
}
namespace std
{
    template<> struct hash<winrt::Windows::UI::Composition::Desktop::IDesktopWindowTarget> : winrt::impl::hash_base<winrt::Windows::UI::Composition::Desktop::IDesktopWindowTarget> {};
    template<> struct hash<winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget> : winrt::impl::hash_base<winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget> {};
}
#endif
